{"exec_count":10,"start":1511817148374,"input":"%matplotlib inline","state":"done","pos":2,"cell_type":"code","type":"cell","end":1511817148390,"id":"5985ab","kernel":"python2"}
{"exec_count":12,"start":1511817159794,"input":"def testf(x):\n    return (x-1)**2*(x**2+10+np.cos(x))","state":"done","pos":6,"type":"cell","end":1511817159804,"id":"4726ef","kernel":"python2"}
{"exec_count":13,"start":1511817160776,"input":"def testdf(x):\n    return 2*(x-1)*(x**2+10+np.cos(x))+(x-1)**2*(2*x-np.sin(x))","state":"done","pos":7,"type":"cell","end":1511817160782,"id":"343cb9","kernel":"python2"}
{"exec_count":36,"start":1511818054772,"input":"def myf(x):\n    return (x**2)-1","state":"done","pos":6.5,"type":"cell","end":1511818054786,"id":"f658b8","kernel":"python2"}
{"exec_count":37,"start":1511818057970,"input":"def mydf(x):\n    return 2*x","state":"done","pos":7.5,"cell_type":"code","type":"cell","end":1511818057982,"id":"06568d","kernel":"python2"}
{"exec_count":48,"start":1511819584934,"input":"def sigmoid(x):\n    return 1 / (1 + np.exp(-x))","state":"done","pos":12,"cell_type":"code","type":"cell","end":1511819584950,"id":"cdfb3e","kernel":"python2"}
{"exec_count":49,"start":1511819585925,"input":"def dsigmoid(x):\n    s=sigmoid(x)\n    return s*(1-s)","state":"done","pos":13,"cell_type":"code","type":"cell","end":1511819585930,"id":"b522c1","kernel":"python2"}
{"exec_count":57,"start":1511820067876,"input":"def mu(theta,x):\n    # assuming theta = [t0, t1, ..., t11]\n    musum=0\n    for i in range(0,12,3):\n        musum+=theta[i]*sigmoid(theta[i+1]+theta[i+2]*x)\n    return musum","state":"done","pos":17,"cell_type":"code","type":"cell","end":1511820067884,"id":"84d5d9","kernel":"python2"}
{"exec_count":59,"start":1511820069381,"input":"data=np.linspace(0,2*np.pi,100)\ny=np.sin(data)","state":"done","pos":18,"cell_type":"code","type":"cell","end":1511820069405,"id":"58fca5","kernel":"python2"}
{"exec_count":62,"start":1511820137785,"input":"def cost(theta):\n    totalcost=0\n    for i in range(100):\n        totalcost+=(mu(theta,data[i])-y[i])**2\n    return (1.0/200)*totalcost","state":"done","pos":20,"cell_type":"code","type":"cell","end":1511820137792,"id":"5b9012","kernel":"python2"}
{"exec_count":63,"start":1511820138717,"input":"def gradcost(theta):\n    gradvect=np.zeros(12)\n    for x in data:\n        dcostdmu=(mu(theta,x)-np.sin(x))\n        for i in range(0,12,3):\n            term=dcostdmu*theta[i]*dsigmoid(theta[i+1]+theta[i+2]*x)\n            gradvect[i]+=dcostdmu*sigmoid(theta[i+1]+theta[i+2]*x)\n            gradvect[i+1]+=term\n            gradvect[i+2]+=term*x\n    return 1.0/100*gradvect","state":"done","pos":21,"cell_type":"code","type":"cell","end":1511820138738,"id":"38febe","kernel":"python2"}
{"exec_count":71,"start":1511820164588,"input":"mytheta0=np.random.rand(12)","state":"done","pos":22,"cell_type":"code","type":"cell","end":1511820164593,"id":"ef5003","kernel":"python2"}
{"exec_count":74,"start":1511820173664,"input":"numgrad=np.zeros(12)\nfor i in range(12):\n    zerovect=np.zeros(12)\n    zerovect[i]=1\n    numgrad[i]=10**5*(cost(mytheta0+10**(-5)*zerovect)-cost(mytheta0))","state":"done","pos":26,"cell_type":"code","type":"cell","end":1511820173723,"id":"192353","kernel":"python2"}
{"exec_count":83,"start":1511820362697,"input":"def my_grad_desc(g,dg,x,tol_1,tol_2,max_steps):\n    counter =0\n    for i in range(max_steps):\n        #print i,x,g(x)\n        g0 = g(x)\n        grad = dg(x)\n        norm_grad = np.linalg.norm(grad)\n        counter +=1\n        if counter % 20 == 0:\n            print norm_grad\n        if norm_grad < tol_1:\n            #print \"gradient norm less than \", tol_1\n            #print \"min value of \", g0,\" obtained in \",i+1,\" steps.\"\n            return x\n            break\n        unit_grad = (1/norm_grad)*grad\n        alpha0=0; alpha2=1\n        g2 = g(x-alpha2*unit_grad)\n        while g2 >= g0:\n            alpha2 = 0.5*alpha2\n            g2 = g(x-alpha2*unit_grad)\n            if alpha2 < tol_1:\n                #print \"step size less than \", tol_1\n                #print \"min value of \", g0,\" obtained in \",i+1,\" steps.\"\n                return x\n                break\n        alpha1 = 0.5*alpha2\n        g1 = g(x-alpha1*unit_grad)\n        h0 = (g1-g0)/alpha1\n        h1 = (g2-g1)/(alpha2-alpha1)\n        h2 = (h1-h0)/alpha2\n        alpha0=0.5*(alpha1-h0/h2)\n        g00=g(x-alpha0*unit_grad)\n        if abs(g00-g0) < tol_2 :\n            #print \"functional values less than \", tol_2\n            return x\n            break\n        x = x-alpha0*unit_grad\n    #print(\"iteration limit reached.  min value of \", g0,\" obtained in \",i+1,\" steps.\")\n    return x","state":"done","pos":4,"cell_type":"code","type":"cell","end":1511820362716,"id":"f0ba6f","kernel":"python2"}
{"exec_count":9,"start":1511817147381,"input":"import numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt","state":"done","pos":1,"cell_type":"code","type":"cell","end":1511817147386,"id":"23e307","kernel":"python2"}
{"output":{"0":{"data":{"image/png":"b97850e40ac877a747635f74d4934dfa7a969721"}}},"exec_count":95,"start":1511821673499,"input":"fig = plt.figure()\naxes = fig.add_axes([0.1, 0.1, 0.9, 0.7]) \naxes.plot(data,np.sin(data),c=\"r\");\naxes.plot(data,mu(best_theta,data),c=\"b\");","state":"done","pos":35,"cell_type":"code","type":"cell","end":1511821673801,"id":"ba7137","kernel":"python2"}
{"output":{"0":{"data":{"image/png":"def5e4b53c1e53aadb4386686119d46b69d84249"}}},"exec_count":89,"start":1511820667395,"input":"fig = plt.figure()\naxes = fig.add_axes([0.1, 0.1, 0.9, 0.7]) \naxes.plot(data,np.sin(data),c=\"r\");\naxes.plot(data,mu(sol_theta,data),c=\"b\");","state":"done","pos":31,"cell_type":"code","type":"cell","end":1511820667772,"id":"da25b9","kernel":"python2"}
{"output":{"0":{"data":{"text/plain":"0.076405069968748116"},"exec_count":87}},"exec_count":87,"start":1511820388375,"input":"cost(sol_theta)","state":"done","pos":30,"cell_type":"code","type":"cell","end":1511820388409,"id":"02e7c7","kernel":"python2"}
{"output":{"0":{"data":{"text/plain":"0.69899416764800226"},"exec_count":72}},"exec_count":72,"start":1511820165681,"input":"cost(mytheta0)","state":"done","pos":23,"cell_type":"code","type":"cell","end":1511820165704,"id":"9e5797","kernel":"python2"}
{"output":{"0":{"data":{"text/plain":"0.9999999957195147"},"exec_count":41}},"exec_count":41,"start":1511818060977,"input":"my_grad_desc(testf,testdf,10,10**(-8),10**(-8),100)","state":"done","pos":10,"type":"cell","end":1511818060993,"id":"ff9c7e","kernel":"python2"}
{"output":{"0":{"data":{"text/plain":"17.999999999999236"},"exec_count":58}},"exec_count":58,"start":1511820068869,"input":"mu([0,1,2,3,4,5,6,7,8,9,10,11],5)","state":"done","pos":17.5,"cell_type":"code","type":"cell","end":1511820068907,"id":"b93b8f","kernel":"python2"}
{"output":{"0":{"data":{"text/plain":"3628.9624224586632"},"exec_count":39}},"exec_count":39,"start":1511818059983,"input":"testdf(10)","state":"done","pos":8,"type":"cell","end":1511818060011,"id":"de1706","kernel":"python2"}
{"output":{"0":{"data":{"text/plain":"3628.963013397879"},"exec_count":40}},"exec_count":40,"start":1511818060492,"input":"(testf(10.000001)-testf(10))/.000001","state":"done","pos":9,"type":"cell","end":1511818060519,"id":"eb795a","kernel":"python2"}
{"output":{"0":{"data":{"text/plain":"array([  0.00000000e+00,   6.34239197e-02,   1.26592454e-01,\n         1.89251244e-01,   2.51147987e-01,   3.12033446e-01,\n         3.71662456e-01,   4.29794912e-01,   4.86196736e-01,\n         5.40640817e-01,   5.92907929e-01,   6.42787610e-01,\n         6.90079011e-01,   7.34591709e-01,   7.76146464e-01,\n         8.14575952e-01,   8.49725430e-01,   8.81453363e-01,\n         9.09631995e-01,   9.34147860e-01,   9.54902241e-01,\n         9.71811568e-01,   9.84807753e-01,   9.93838464e-01,\n         9.98867339e-01,   9.99874128e-01,   9.96854776e-01,\n         9.89821442e-01,   9.78802446e-01,   9.63842159e-01,\n         9.45000819e-01,   9.22354294e-01,   8.95993774e-01,\n         8.66025404e-01,   8.32569855e-01,   7.95761841e-01,\n         7.55749574e-01,   7.12694171e-01,   6.66769001e-01,\n         6.18158986e-01,   5.67059864e-01,   5.13677392e-01,\n         4.58226522e-01,   4.00930535e-01,   3.42020143e-01,\n         2.81732557e-01,   2.20310533e-01,   1.58001396e-01,\n         9.50560433e-02,   3.17279335e-02,  -3.17279335e-02,\n        -9.50560433e-02,  -1.58001396e-01,  -2.20310533e-01,\n        -2.81732557e-01,  -3.42020143e-01,  -4.00930535e-01,\n        -4.58226522e-01,  -5.13677392e-01,  -5.67059864e-01,\n        -6.18158986e-01,  -6.66769001e-01,  -7.12694171e-01,\n        -7.55749574e-01,  -7.95761841e-01,  -8.32569855e-01,\n        -8.66025404e-01,  -8.95993774e-01,  -9.22354294e-01,\n        -9.45000819e-01,  -9.63842159e-01,  -9.78802446e-01,\n        -9.89821442e-01,  -9.96854776e-01,  -9.99874128e-01,\n        -9.98867339e-01,  -9.93838464e-01,  -9.84807753e-01,\n        -9.71811568e-01,  -9.54902241e-01,  -9.34147860e-01,\n        -9.09631995e-01,  -8.81453363e-01,  -8.49725430e-01,\n        -8.14575952e-01,  -7.76146464e-01,  -7.34591709e-01,\n        -6.90079011e-01,  -6.42787610e-01,  -5.92907929e-01,\n        -5.40640817e-01,  -4.86196736e-01,  -4.29794912e-01,\n        -3.71662456e-01,  -3.12033446e-01,  -2.51147987e-01,\n        -1.89251244e-01,  -1.26592454e-01,  -6.34239197e-02,\n        -2.44929360e-16])"},"exec_count":61}},"exec_count":61,"start":1511820089835,"input":"y","state":"done","pos":19.5,"cell_type":"code","type":"cell","end":1511820089872,"id":"d10d33","kernel":"python2"}
{"output":{"0":{"data":{"text/plain":"array([ 0.        ,  0.06346652,  0.12693304,  0.19039955,  0.25386607,\n        0.31733259,  0.38079911,  0.44426563,  0.50773215,  0.57119866,\n        0.63466518,  0.6981317 ,  0.76159822,  0.82506474,  0.88853126,\n        0.95199777,  1.01546429,  1.07893081,  1.14239733,  1.20586385,\n        1.26933037,  1.33279688,  1.3962634 ,  1.45972992,  1.52319644,\n        1.58666296,  1.65012947,  1.71359599,  1.77706251,  1.84052903,\n        1.90399555,  1.96746207,  2.03092858,  2.0943951 ,  2.15786162,\n        2.22132814,  2.28479466,  2.34826118,  2.41172769,  2.47519421,\n        2.53866073,  2.60212725,  2.66559377,  2.72906028,  2.7925268 ,\n        2.85599332,  2.91945984,  2.98292636,  3.04639288,  3.10985939,\n        3.17332591,  3.23679243,  3.30025895,  3.36372547,  3.42719199,\n        3.4906585 ,  3.55412502,  3.61759154,  3.68105806,  3.74452458,\n        3.8079911 ,  3.87145761,  3.93492413,  3.99839065,  4.06185717,\n        4.12532369,  4.1887902 ,  4.25225672,  4.31572324,  4.37918976,\n        4.44265628,  4.5061228 ,  4.56958931,  4.63305583,  4.69652235,\n        4.75998887,  4.82345539,  4.88692191,  4.95038842,  5.01385494,\n        5.07732146,  5.14078798,  5.2042545 ,  5.26772102,  5.33118753,\n        5.39465405,  5.45812057,  5.52158709,  5.58505361,  5.64852012,\n        5.71198664,  5.77545316,  5.83891968,  5.9023862 ,  5.96585272,\n        6.02931923,  6.09278575,  6.15625227,  6.21971879,  6.28318531])"},"exec_count":60}},"exec_count":60,"start":1511820072084,"input":"data","state":"done","pos":19,"type":"cell","end":1511820072129,"id":"355006","kernel":"python2"}
{"output":{"0":{"data":{"text/plain":"array([ 0.54013941,  0.02236873,  0.09934042,  0.75090432,  0.03190471,\n        0.13289428,  0.8633875 ,  0.01261109,  0.03218923,  0.8663356 ,\n        0.00135442,  0.00323936])"},"exec_count":73}},"exec_count":73,"start":1511820169473,"input":"gradcost(mytheta0)","state":"done","pos":24,"cell_type":"code","type":"cell","end":1511820169497,"id":"5ace6c","kernel":"python2"}
{"output":{"0":{"data":{"text/plain":"array([ 1.4601537 , -0.22055686,  1.98363458,  3.31852192,  4.89580908,\n       -1.62501499, -2.11213042,  1.88755446, -0.34731965, -2.50011727,\n        1.39052284, -0.28882046])"},"exec_count":91}},"exec_count":91,"start":1511821040984,"input":"best_theta","state":"done","pos":34,"type":"cell","end":1511821041031,"id":"852fd9","kernel":"python2"}
{"output":{"0":{"data":{"text/plain":"array([ 1.82992185, -1.2636912 ,  2.33014093,  3.05662498,  4.17035386,\n       -1.51112569, -2.42562383,  1.31052716, -0.32273614, -1.62580399,\n        1.96637536,  1.57767638])"},"exec_count":94}},"exec_count":94,"start":1511821657277,"input":"best_theta","state":"done","pos":34.5,"type":"cell","end":1511821657344,"id":"1ad9cb","kernel":"python2"}
{"output":{"0":{"text":"0.0782246949958\n","name":"stdout"},"1":{"text":"0.0278997399883\n","name":"stdout"},"2":{"text":"0.0161349577611\n","name":"stdout"},"3":{"text":"0.0163601911649\n","name":"stdout"},"4":{"text":"0.0176385882904\n","name":"stdout"}},"exec_count":86,"start":1511820383267,"input":"sol_theta=my_grad_desc(cost,gradcost,mytheta0,10**(-10),10**(-10),100)","state":"done","pos":29,"cell_type":"code","type":"cell","end":1511820385463,"id":"6b8e90","kernel":"python2"}
{"output":{"0":{"text":"0.196611887771\n0.196611933241\n","name":"stdout"}},"exec_count":50,"start":1511819587143,"input":"print (sigmoid(1.000001)-sigmoid(1))/.000001\nprint dsigmoid(1)","state":"done","pos":15,"cell_type":"code","type":"cell","end":1511819587237,"id":"4464e8","kernel":"python2"}
{"output":{"0":{"text":"0\n3\n6\n9\n","name":"stdout"}},"exec_count":51,"start":1511819588657,"input":"for i in range(0,12,3):\n    print i","state":"done","pos":16,"type":"cell","end":1511819588698,"id":"ba9c06","kernel":"python2"}
{"output":{"0":{"text":"15\n","name":"stdout"},"1":{"data":{"text/plain":"8"},"exec_count":38}},"exec_count":38,"start":1511818058981,"input":"print myf(4)\nmydf(4)","state":"done","pos":7.75,"type":"cell","end":1511818059008,"id":"b86c36","kernel":"python2"}
{"output":{"0":{"text":"2.0\n0.0\n","name":"stdout"},"1":{"data":{"text/plain":"0.0"},"exec_count":46}},"exec_count":46,"start":1511818652070,"input":"my_grad_desc(myf,mydf,1,10**(-8),10**(-8),100)","state":"done","pos":10.5,"type":"cell","end":1511818652094,"id":"785703","kernel":"python2"}
{"output":{"0":{"text":"[  1.71267755e-06  -2.06175643e-08  -5.05459709e-07   3.07104989e-06\n  -9.41282495e-08  -2.12428529e-06   4.10777674e-06  -1.95120175e-08\n  -6.01527909e-07   4.18114151e-06  -4.19461584e-09  -6.30807671e-08]\n","name":"stdout"}},"exec_count":75,"start":1511820177887,"input":"print numgrad-gradcost(mytheta0)","state":"done","pos":27,"cell_type":"code","type":"cell","end":1511820177924,"id":"9525a2","kernel":"python2"}
{"output":{"0":{"text":"trial  0\n","name":"stdout"},"1":{"text":"0.138949004909\n","name":"stdout"},"2":{"text":"0.051811777057\n","name":"stdout"},"3":{"text":"0.0388430490717\n","name":"stdout"},"4":{"text":"0.0370475342069\n","name":"stdout"},"5":{"text":"0.0375846612345\n","name":"stdout"},"6":{"text":"0.0387096715688\n","name":"stdout"},"7":{"text":"0.0397978622429\n","name":"stdout"},"8":{"text":"0.0403716324042\n","name":"stdout"},"9":{"text":"0.0400258121301\n","name":"stdout"},"10":{"text":"0.0385533129059\n","name":"stdout"},"11":{"text":"0.0360516843434\n","name":"stdout"},"12":{"text":"0.0328582250605\n","name":"stdout"},"13":{"text":"0.0293741399108\n","name":"stdout"},"14":{"text":"0.0259362482224\n","name":"stdout"},"15":{"text":"0.0228626822252\nimproved parameters with cost  0.0351140111966  found\ntrial  1\n","name":"stdout"},"16":{"text":"0.132935967582\n","name":"stdout"},"17":{"text":"0.043497009874\n","name":"stdout"},"18":{"text":"0.0261723548982\n","name":"stdout"},"19":{"text":"0.0234846720563\n","name":"stdout"},"20":{"text":"0.0237407222293\n","name":"stdout"},"21":{"text":"0.0248899910197\n","name":"stdout"},"22":{"text":"0.0264973176654\n","name":"stdout"},"23":{"text":"0.0285305950047\n","name":"stdout"},"24":{"text":"0.0308566931107\n","name":"stdout"},"25":{"text":"0.032383381733\n","name":"stdout"},"26":{"text":"0.0326600381539\n","name":"stdout"},"27":{"text":"0.0328431859502\n","name":"stdout"},"28":{"text":"0.0328498101214\n","name":"stdout"},"29":{"text":"0.0326008360036\n","name":"stdout"},"30":{"text":"0.0320366891929\ntrial  2\n","name":"stdout"},"31":{"text":"0.0570170154603\n","name":"stdout"},"32":{"text":"0.0391491118122\n","name":"stdout"},"33":{"text":"0.0404600712939\n","name":"stdout"},"34":{"text":"0.0431719068015\n","name":"stdout"},"35":{"text":"0.0450449191237\n","name":"stdout"},"36":{"text":"0.0461675503159\n","name":"stdout"},"37":{"text":"0.0465574974829\n","name":"stdout"},"38":{"text":"0.0460138362714\n","name":"stdout"},"39":{"text":"0.043564850891\n","name":"stdout"},"40":{"text":"0.0399001533102\n","name":"stdout"},"41":{"text":"0.0357937391412\n","name":"stdout"},"42":{"text":"0.0318328390918\n","name":"stdout"},"43":{"text":"0.0283948298445\n","name":"stdout"},"44":{"text":"0.0260285645666\n","name":"stdout"},"45":{"text":"0.0238442371222\nimproved parameters with cost  0.0210044611419  found\ntrial  3\n","name":"stdout"},"46":{"text":"0.0686335689452\n","name":"stdout"},"47":{"text":"0.106886475427\n","name":"stdout"},"48":{"text":"0.0944209176773\n","name":"stdout"},"49":{"text":"0.0355518724375\n","name":"stdout"},"50":{"text":"0.0333875718156\n","name":"stdout"},"51":{"text":"0.0319161504734\n","name":"stdout"},"52":{"text":"0.0305960737362\n","name":"stdout"},"53":{"text":"0.0292551505558\n","name":"stdout"},"54":{"text":"0.0277915222577\n","name":"stdout"},"55":{"text":"0.0261637893855\n","name":"stdout"},"56":{"text":"0.0243909779921\n","name":"stdout"},"57":{"text":"0.0226359471659\n","name":"stdout"},"58":{"text":"0.0210266348836\n","name":"stdout"},"59":{"text":"0.0196185083224\n","name":"stdout"},"60":{"text":"0.0183822425453\nimproved parameters with cost  0.0135780306138  found\ntrial  4\n","name":"stdout"},"61":{"text":"0.0481161699234\n","name":"stdout"},"62":{"text":"0.0639588648256\n","name":"stdout"},"63":{"text":"0.0832771706883\n","name":"stdout"},"64":{"text":"0.0913888412986\n","name":"stdout"},"65":{"text":"0.0751395471917\n","name":"stdout"},"66":{"text":"0.0512255107604\n","name":"stdout"},"67":{"text":"0.0336628255455\n","name":"stdout"},"68":{"text":"0.0246889404823\n","name":"stdout"},"69":{"text":"0.0208874136542\n","name":"stdout"},"70":{"text":"0.0196387014624\n","name":"stdout"},"71":{"text":"0.0194063134306\n","name":"stdout"},"72":{"text":"0.01954278317\n","name":"stdout"},"73":{"text":"0.0198122493365\n","name":"stdout"},"74":{"text":"0.0201214678146\n","name":"stdout"},"75":{"text":"0.0204166538807\ntrial  5\n","name":"stdout"},"76":{"text":"0.00825068594354\n","name":"stdout"},"77":{"text":"0.00947930040344\n","name":"stdout"},"78":{"text":"0.0111512569546\n","name":"stdout"},"79":{"text":"0.0134442471323\n","name":"stdout"},"80":{"text":"0.0167160421483\n","name":"stdout"},"81":{"text":"0.0217161773524\n","name":"stdout"},"82":{"text":"0.0301881811356\n","name":"stdout"},"83":{"text":"0.0477694651985\n","name":"stdout"},"84":{"text":"0.0923167922631\n","name":"stdout"},"85":{"text":"0.0466094867668\n","name":"stdout"},"86":{"text":"0.0127918127704\n","name":"stdout"},"87":{"text":"0.0133240312395\n","name":"stdout"},"88":{"text":"0.0165363308145\n","name":"stdout"},"89":{"text":"0.0182105972267\n","name":"stdout"},"90":{"text":"0.0141691456099\ntrial  6\n","name":"stdout"},"91":{"text":"0.151674349602\n","name":"stdout"},"92":{"text":"0.11478878591\n","name":"stdout"},"93":{"text":"0.0841713230017\n","name":"stdout"},"94":{"text":"0.0531448033037\n","name":"stdout"},"95":{"text":"0.0340234956203\n","name":"stdout"},"96":{"text":"0.0251968593294\n","name":"stdout"},"97":{"text":"0.0219159610001\n","name":"stdout"},"98":{"text":"0.0211017070435\n","name":"stdout"},"99":{"text":"0.0211159880278\n","name":"stdout"},"100":{"text":"0.0213721204216\n","name":"stdout"},"101":{"text":"0.0216871906625\n","name":"stdout"},"102":{"text":"0.0219953946547\n","name":"stdout"},"103":{"text":"0.0222579650283\n","name":"stdout"},"104":{"text":"0.0224396072444\n","name":"stdout"},"105":{"text":"0.022504756853\ntrial  7\n","name":"stdout"},"106":{"text":"0.033390257927\n","name":"stdout"},"107":{"text":"0.0227181228003\n","name":"stdout"},"108":{"text":"0.0208558703993\n","name":"stdout"},"109":{"text":"0.0206201733755\n","name":"stdout"},"110":{"text":"0.0203936125138\n","name":"stdout"},"111":{"text":"0.0205494908595\n","name":"stdout"},"112":{"text":"0.0209942080045\n","name":"stdout"},"113":{"text":"0.0216778877014\n","name":"stdout"},"114":{"text":"0.0225707066535\n","name":"stdout"},"115":{"text":"0.0236516341923\n","name":"stdout"},"116":{"text":"0.0249010676398\n","name":"stdout"},"117":{"text":"0.0259720840608\n","name":"stdout"},"118":{"text":"0.0265525912601\n","name":"stdout"},"119":{"text":"0.0270148549144\n","name":"stdout"},"120":{"text":"0.0272915606918\ntrial  8\n","name":"stdout"},"121":{"text":"0.0998082389603\n","name":"stdout"},"122":{"text":"0.0556466055709\n","name":"stdout"},"123":{"text":"0.035116013568\n","name":"stdout"},"124":{"text":"0.0268510238213\n","name":"stdout"},"125":{"text":"0.0255159867747\n","name":"stdout"},"126":{"text":"0.0257567842815\n","name":"stdout"},"127":{"text":"0.0264774183863\n","name":"stdout"},"128":{"text":"0.0273961816003\n","name":"stdout"},"129":{"text":"0.0283918839053\n","name":"stdout"},"130":{"text":"0.0293164147794\n","name":"stdout"},"131":{"text":"0.0295939602736\n","name":"stdout"},"132":{"text":"0.0296463390002\n","name":"stdout"},"133":{"text":"0.0294699549107\n","name":"stdout"},"134":{"text":"0.0292789895836\n","name":"stdout"},"135":{"text":"0.0288537550451\ntrial  9\n","name":"stdout"},"136":{"text":"0.0580019667437\n","name":"stdout"},"137":{"text":"0.0727395312185\n","name":"stdout"},"138":{"text":"0.0715881807497\n","name":"stdout"},"139":{"text":"0.0476906370779\n","name":"stdout"},"140":{"text":"0.0263422681069\n","name":"stdout"},"141":{"text":"0.0183829770373\n","name":"stdout"},"142":{"text":"0.0172222662522\n","name":"stdout"},"143":{"text":"0.0177698269032\n","name":"stdout"},"144":{"text":"0.0184915758096\n","name":"stdout"},"145":{"text":"0.0189444708427\n","name":"stdout"},"146":{"text":"0.0189348007462\n","name":"stdout"},"147":{"text":"0.0184117929836\n","name":"stdout"},"148":{"text":"0.0174377371776\n","name":"stdout"},"149":{"text":"0.0161296088193\n","name":"stdout"},"150":{"text":"0.0146177882391\nTrials complete\n","name":"stdout"}},"exec_count":93,"start":1511821534746,"input":"best_theta=np.zeros(12)\nbest_initial_theta=np.zeros(12)\nnum_trials=10\nfor i in range(num_trials):\n    print \"trial \",i\n    random_theta=2*np.random.rand(12)\n    sol_theta=my_grad_desc(cost,gradcost,random_theta,10**(-10),10**(-10),300)\n    if cost(sol_theta)<cost(best_theta):\n        print \"improved parameters with cost \",cost(sol_theta),\" found\"\n        best_theta=sol_theta\n        best_initial_theta=random_theta\nprint \"Trials complete\"","state":"done","pos":33,"cell_type":"code","type":"cell","end":1511821590892,"id":"501ce4","kernel":"python2"}
{"type":"cell","id":"026b40","pos":25,"input":"Let's test whether our derivative is correct","cell_type":"markdown"}
{"type":"cell","id":"1a0981","pos":11.5,"input":"## Step 2. Define the function $\\mu$, the cost function, and the gradient of the cost function","cell_type":"markdown"}
{"type":"cell","id":"555590","pos":28,"input":"## Step 3.  Search for parameters that minimize cost","cell_type":"markdown"}
{"type":"cell","id":"60dd40","pos":3,"input":"## Step 1. Write a gradient descent algorithm","cell_type":"markdown"}
{"type":"cell","id":"9c7602","pos":32,"input":"Not bad, but let's run some trials to see if we can do better","cell_type":"markdown"}
{"type":"cell","id":"b35953","pos":11,"input":"### Exercise:  add a Boolean input specifying whether the gradient descent program should provide verbose output or not","cell_type":"markdown"}
{"type":"cell","id":"b74f4b","pos":40,"input":"### Exercise:  Program a solution using stochastic gradient.  Try mini-batches of size 20.","cell_type":"markdown"}
{"type":"cell","id":"c13ee1","pos":42,"input":""}
{"type":"cell","id":"c2f5ec","pos":0,"input":"# My solution to Problem 2, assignment 3","cell_type":"markdown"}
{"type":"cell","id":"d037b2","pos":1.5,"input":""}
{"type":"cell","id":"f4d922","pos":5,"input":"Let's test the gradient descent program","cell_type":"markdown"}
{"type":"cell","id":"f845a4","pos":14,"input":"Let's test whether our derivative is correct","cell_type":"markdown"}
{"type":"cell","id":"fd5727","pos":41,"input":".022 -> .007","cell_type":"markdown"}
{"type":"file","last_load":1510252033731}
{"type":"settings","kernel":"python2","backend_state":"running","trust":true,"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.13"}},"kernel_usage":{"cpu":0,"memory":79273984},"kernel_state":"idle"}
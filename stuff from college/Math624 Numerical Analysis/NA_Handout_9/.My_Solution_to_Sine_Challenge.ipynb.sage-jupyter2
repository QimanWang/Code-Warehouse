{"type":"settings","kernel":"python2","backend_state":"running","trust":true,"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.13"}},"kernel_usage":{"cpu":0,"memory":97624064},"kernel_state":"idle"}
{"exec_count":7,"start":1512500213779,"input":"mydata=np.linspace(0,2*np.pi,1000)","state":"done","pos":5,"cell_type":"code","type":"cell","end":1512500213784,"id":"b5ebcf","kernel":"python2"}
{"exec_count":14,"start":1512501254150,"input":"myE = sig_gram_schmidt(myB,mydata)","state":"done","pos":12,"cell_type":"code","type":"cell","end":1512501254159,"id":"564e9e","kernel":"python2"}
{"exec_count":17,"start":1512501554185,"input":"def orthoproject(E,data):\n    N = len(data)\n    coeffs = []\n    theta_out = np.zeros(12)\n    for ei in E:\n        coeff = 1.0/N*np.sum(np.sin(mydata)*mu(ei,mydata))\n        coeffs.append(coeff)\n    theta_out = scale_theta(E[3],coeffs[3])\n    theta_out[6] += coeffs[2]*E[2][6]\n    theta_out[3] += coeffs[2]*E[2][3]\n    theta_out[0] += coeffs[2]*E[2][0]\n    theta_out[3] += coeffs[1]*E[1][3]\n    theta_out[0] += coeffs[1]*E[1][0]\n    theta_out[0] += coeffs[0]*E[0][0]\n    return theta_out","state":"done","pos":14,"cell_type":"code","type":"cell","end":1512501554204,"id":"2753a5","kernel":"python2"}
{"output":{"0":{"text":"[array([ 1.        ,  2.83117475,  1.48005295]), array([ 0.        ,  0.        ,  0.        ,  1.        , -0.43417636,\n        1.99839397]), array([ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  1.        ,  5.38785027,  1.56734854]), array([ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        0.        ,  0.        ,  0.        ,  0.        ,  1.        ,\n        3.08999697,  0.46488654])]\n","name":"stdout"}},"exec_count":12,"start":1512500475880,"input":"myB = basis_from_theta(my_theta)\nprint myB","state":"done","pos":10,"cell_type":"code","type":"cell","end":1512500475900,"id":"ede27b","kernel":"python2"}
{"type":"file","last_load":1512497782626}
{"output":{"0":{"text":"new best found 8.24471426294e-05\n","name":"stdout"},"1":{"text":"new best found 2.95290359863e-05\n","name":"stdout"},"2":{"text":"best is 2.95290359863e-05\n[ 33.37297664  -1.57104526   0.38588102  -4.76528849   1.50911863\n  -0.90883989 -29.92948801  -1.94205095   0.68376755   4.04704312\n  -0.12518974   0.85365515]\n","name":"stdout"}},"exec_count":31,"start":1512502213592,"input":"for i in range(40000):\n    B = basis_from_theta(random_initial_theta(12))\n    E = sig_gram_schmidt(B,mydata)\n    my_theta=orthoproject(E,mydata)\n    trial = (1.0/1000)*np.sum((np.sin(mydata)-mu(my_theta,mydata))**2)\n    if trial < best:\n        best = trial\n        print \"new best found\", best\n        best_theta = np.copy(my_theta)\nprint \"best is\", best\nprint best_theta","state":"done","pos":18,"cell_type":"code","type":"cell","end":1512502347367,"id":"573349","kernel":"python2"}
{"exec_count":11,"start":1512500410579,"input":"def basis_from_theta(theta):\n    n = len(theta)\n    B = []\n    for i in range(0,n,3):\n        newtheta = np.zeros(i+3)\n        newtheta[i:i+3] = np.array(theta[i:i+3])\n        B.append(newtheta)\n    return B","state":"done","pos":9,"cell_type":"code","type":"cell","end":1512500410586,"id":"2bbe49","kernel":"python2"}
{"exec_count":1,"start":1512499865281,"input":"import numpy as np","state":"done","pos":0,"cell_type":"code","type":"cell","end":1512499865285,"id":"e38058","kernel":"python2"}
{"exec_count":3,"start":1512499972280,"input":"def sigtheta(theta,xval):\n    return theta[0]*sigmoid(theta[1]+theta[2]*xval)","state":"done","pos":2,"cell_type":"code","type":"cell","end":1512499972283,"id":"a896eb","kernel":"python2"}
{"exec_count":18,"start":1512501557804,"input":"my_test_theta=orthoproject(myE,mydata)","state":"done","pos":15,"cell_type":"code","type":"cell","end":1512501557816,"id":"93604f","kernel":"python2"}
{"output":{"0":{"text":"[ 1.          2.83117475  1.48005295  1.         -0.43417636  1.99839397\n  1.          5.38785027  1.56734854  1.          3.08999697  0.46488654]\n","name":"stdout"}},"exec_count":10,"start":1512500375882,"input":"my_theta = random_initial_theta(12)\nprint my_theta","state":"done","pos":8,"cell_type":"code","type":"cell","end":1512500375898,"id":"ae2f58","kernel":"python2"}
{"exec_count":13,"start":1512501158385,"input":"def sig_gram_schmidt(B,data):\n    E = []\n    \n    norm0 = np.sqrt(myip(B[0],B[0],mydata))\n    E0 = scale_theta(B[0],1/norm0)\n    E.append(E0)\n\n    f1=np.copy(B[1])\n    scale = - myip(E[0],f1,mydata)\n    f1[:3] = scale_theta(E[0],scale)\n    norm1 = np.sqrt(myip(f1,f1,mydata))\n    E1 = scale_theta(f1,1/norm1)\n    E.append(E1)\n\n    f2 = np.copy(B[2])\n    scale0 = - myip(E[0],B[2],mydata)\n    scale1 = - myip(E[1],B[2],mydata)\n    \n    f2[:6] = scale_theta(E[1],scale1)\n    f2[0]+=scale0*E[0][0]\n    norm2 = np.sqrt(myip(f2,f2,mydata))\n    E2 = scale_theta(f2,1/norm2)\n    E.append(E2)\n\n    f3 = np.copy(B[3])\n    scale0 = - myip(E[0],B[3],mydata)\n    scale1 = - myip(E[1],B[3],mydata)\n    scale2 = - myip(E[2],B[3],mydata)\n\n    f3[:9] = scale_theta(E[2],scale2)\n    f3[3] += scale1*E[1][3]\n    f3[0] += scale1*E[1][0]\n    f3[0] += scale0*E[0][0]\n    norm3 = np.sqrt(myip(f3,f3,mydata))\n    E3 = scale_theta(f3,1/norm3)\n    E.append(E3)\n    \n    return E","state":"done","pos":11,"cell_type":"code","type":"cell","end":1512501158419,"id":"995703","kernel":"python2"}
{"exec_count":5,"start":1512500041784,"input":"def mu(theta,xval):\n    out = 0\n    j = len(theta)\n    for i in range(0,j,3):\n        out += theta[i]*sigmoid(theta[i+1]+theta[i+2]*xval)\n    return out","state":"done","pos":3,"cell_type":"code","type":"cell","end":1512500041789,"id":"d21521","kernel":"python2"}
{"start":1512499234681,"input":"for i in range(100000):\n    B = basis_from_theta(random_initial_theta(12))\n    E = sig_gram_schmidt(B,mydata)\n    my_theta=orthoproject(E,mydata)\n    trial = (1.0/1000)*np.sum((np.sin(mydata)-mu(my_theta,mydata))**2)\n    if trial < best:\n        best = trial\n        print \"new best found\", best\n        best_theta = np.copy(my_theta)\nprint \"best is\", best\nprint best_theta","state":"done","pos":20,"cell_type":"code","type":"cell","end":1512499547135,"id":"8aa0d2","kernel":"python2"}
{"exec_count":33,"start":1512502407480,"input":"np.save('best_theta',best_theta)","state":"done","pos":21,"cell_type":"code","type":"cell","end":1512502407488,"id":"a0eb07","kernel":"python2"}
{"exec_count":19,"start":1512501573985,"input":"import matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline","state":"done","pos":16,"cell_type":"code","type":"cell","end":1512501574003,"id":"bb81f1","kernel":"python2"}
{"exec_count":6,"start":1512500177588,"input":"def scale_theta(theta,factor):\n    j = len(theta)\n    factor_vec = np.ones(j)\n    for i in range(0,j,3):\n        factor_vec[i] = factor\n    return factor_vec*theta","state":"done","pos":4,"cell_type":"code","type":"cell","end":1512500177592,"id":"91b029","kernel":"python2"}
{"output":{"0":{"data":{"image/png":"02b55b9a62dfa387becb1ee1883e33836ddc7838"}}},"exec_count":20,"start":1512501577881,"input":"fig = plt.figure()\naxes = fig.add_axes([0.1, 0.1, 0.9, 0.7]) \naxes.plot(mydata,np.sin(mydata),c=\"r\");\naxes.plot(mydata,mu(my_test_theta,mydata),c=\"b\");","state":"done","pos":17,"cell_type":"code","type":"cell","end":1512501578166,"id":"00c61e","kernel":"python2"}
{"output":{"0":{"text":"[[  1.00000000e+00  -5.68434189e-16   1.77770687e-13  -6.45172804e-14]\n [ -5.68434189e-16   1.00000000e+00   6.22108587e-13  -1.73088210e-14]\n [  1.77770687e-13   6.22108587e-13   1.00000000e+00  -3.50081635e-11]\n [ -6.45172804e-14  -1.73088210e-14  -3.50081635e-11   1.00000000e+00]]\n","name":"stdout"}},"exec_count":16,"start":1512501402787,"input":"ips=np.zeros((4,4))\nfor i in range(4):\n    for j in range(4):\n        ips[i,j]=myip(myE[i],myE[j],mydata)\nprint ips","state":"done","pos":13,"cell_type":"code","type":"cell","end":1512501402810,"id":"9b340e","kernel":"python2"}
{"exec_count":30,"start":1512502204899,"input":"def random_initial_theta(n):\n    theta = np.ones(n)\n    for i in range(1,n,3):\n        theta[i:i+2] = np.random.randn(2)\n    return theta","state":"done","pos":7,"cell_type":"code","type":"cell","end":1512502204908,"id":"bfaaf6","kernel":"python2"}
{"output":{"0":{"data":{"image/png":"6eb885b709081faf76b81ead812bf36588d50de5"}}},"exec_count":32,"start":1512502367684,"input":"fig = plt.figure()\naxes = fig.add_axes([0.1, 0.1, 0.9, 0.7]) \naxes.plot(mydata,np.sin(mydata),c=\"r\");\naxes.plot(mydata,mu(best_theta,mydata),c=\"b\");","state":"done","pos":19,"cell_type":"code","type":"cell","end":1512502367923,"id":"df1ce8","kernel":"python2"}
{"exec_count":2,"start":1512499866952,"input":"def sigmoid(x):\n    return 1.0/(1.0+np.exp(-x))","state":"done","pos":1,"cell_type":"code","type":"cell","end":1512499866987,"id":"91fa2d","kernel":"python2"}
{"exec_count":8,"start":1512500320676,"input":"def myip(theta1,theta2,data):\n    N = len(data)\n    return (1.0/N)*np.sum(mu(theta1,mydata)*mu(theta2,mydata))","state":"done","pos":6,"cell_type":"code","type":"cell","end":1512500320682,"id":"ac4714","kernel":"python2"}
{"exec_count":25,"start":1512501756590,"input":"saved_best_theta=np.load('best_theta.npy')","state":"done","pos":22,"type":"cell","end":1512501756596,"id":"56dd9d","kernel":"python2"}
{"output":{"0":{"data":{"image/png":"72f94f4f8b0a128312ec90d3849eefc6d4fe48b0"}}},"exec_count":26,"start":1512501777663,"input":"fig = plt.figure()\naxes = fig.add_axes([0.1, 0.1, 0.9, 0.7]) \naxes.plot(mydata,np.sin(mydata),c=\"r\");\naxes.plot(mydata,mu(saved_best_theta,mydata),c=\"b\");","state":"done","pos":24,"type":"cell","end":1512501777933,"id":"dc3f45","kernel":"python2"}
{"output":{"0":{"data":{"text/plain":"0.00027411998295621471"},"exec_count":27}},"exec_count":27,"start":1512501785084,"input":"(1.0/1000)*np.sum((np.sin(mydata)-mu(best_theta,mydata))**2)","state":"done","pos":25,"type":"cell","end":1512501785105,"id":"4e4541","kernel":"python2"}
{"output":{"0":{"data":{"text/plain":"4.6702398457301524e-05"},"exec_count":28}},"exec_count":28,"start":1512501786519,"input":"(1.0/1000)*np.sum((np.sin(mydata)-mu(saved_best_theta,mydata))**2)","state":"done","pos":26,"type":"cell","end":1512501786526,"id":"07c34f","kernel":"python2"}
{"type":"cell","id":"15ad4e","pos":27,"input":""}
{"output":{"0":{"data":{"text/plain":"[array([ 1.0061488 ,  2.83117475,  1.48005295]),\n array([-7.02620931,  2.83117475,  1.48005295,  7.5329205 , -0.43417636,\n         1.99839397]),\n array([ -1.18668523e+03,   2.83117475e+00,   1.48005295e+00,\n          8.91113585e+01,  -4.34176358e-01,   1.99839397e+00,\n          1.09739795e+03,   5.38785027e+00,   1.56734854e+00]),\n array([  64.82553442,    2.83117475,    1.48005295,  -17.77693165,\n          -0.43417636,    1.99839397, -246.01188695,    5.38785027,\n           1.56734854,  200.81622454,    3.08999697,    0.46488654])]"},"exec_count":15}},"exec_count":15,"start":1512501265089,"input":"myE","state":"done","pos":12.5,"type":"cell","end":1512501265112,"id":"ee8514","kernel":"python2"}
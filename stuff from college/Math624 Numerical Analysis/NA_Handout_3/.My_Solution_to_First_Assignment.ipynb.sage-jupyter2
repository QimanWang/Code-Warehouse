{"type":"cell","id":"f97342","pos":17,"input":"fig = plt.figure()\naxes = fig.add_axes([0.1, 0.1, 0.9, 0.7])\naxes.plot(x,y)\naxes.scatter(data[:,0],data[:,1],c=\"r\");","output":{"0":{"data":{"image/png":"11cd5a1b083c07ea73a778a04106d3458909ad9b"},"output_type":"execute_result","exec_count":12}},"cell_type":"code","exec_count":12}
{"type":"cell","id":"e4dc9c","pos":5,"input":"### Define a family of polynomials $p_a(x)$ parametrized by the coefficients $a=[a_0, a_1, \\ldots, a_d]$\n\nInput coefficients $a=[a_0,a_1,...,a_d]$ and a number $x$ and output $p_a(x)=a_0+a_1x+a_2 x^2+\\cdots +a_d x^d$","cell_type":"markdown"}
{"type":"cell","id":"cb40dd","pos":20,"input":"","cell_type":"code","exec_count":0}
{"type":"cell","id":"4394ea","pos":0,"input":"# A solution to the first homework assignment","cell_type":"markdown"}
{"type":"cell","id":"a2ac16","pos":8,"input":"### Define a cost function to measure the error between a polynomial and the fixed data\nSpecifically,\n$$cost([a_0,a_1,\\ldots, a_d]) = \\frac{1}{2}\\sum_{i=0}^n \\left(p_a(x_i)-y_i\\right)^2$$\nwhere the data consists of\n$$\\left \\{ (x_0,y_0), (x_1, y_1), \\ldots, (x_n, y_n)\\right \\}$$\n\nThe cost is a function of the coefficients $a=[a_0,a_1,...,a_d]$ of the polynomial $p_a.$","cell_type":"markdown"}
{"type":"cell","id":"25ef4e","pos":11,"input":"def dcost(a):\n    mygrad=np.zeros(len(a))\n    for j in range(len(a)):\n        mysum=0\n        for point in data:\n            mysum+=(p(point[0],a)-point[1])*point[0]**j\n        mygrad[j]=mysum\n    return mygrad","cell_type":"code","exec_count":8}
{"type":"cell","id":"8d774f","pos":9,"input":"def cost(a):\n    mysum=0\n    for point in data:\n        mysum+=(p(point[0],a)-point[1])**2\n    return 0.5*mysum","cell_type":"code","exec_count":6}
{"type":"cell","id":"b4e03f","pos":2,"input":"%matplotlib inline","cell_type":"code","exec_count":2}
{"type":"cell","id":"dd2df8","pos":13,"input":"# a_old = np.zeros(6)\na_old = np.random.rand(6) # start with random coefficients instead of zeros\nprint \"Starting with initial coefficients\", a_old\nh = 10**(-7) # step size\ntol_1 = 10**(-10) # stop if change in coefficients is less than tol_1\ntol_2 = .005 # stop if change in total cost is less than tol_2\nmax_steps = 20000 # stop if total number of steps exceeds max_steps\n\na_list = [a_old]\nz_list = [cost(a_old)]\n\na_new = a_old - h * dcost(a_old)\na_list.append(a_new)\nz_list.append(cost(a_new))\n\nfor i in range(max_steps):\n    if sum((a_new-a_old)**2) < tol_1:\n        print \"domain values within tolerance \", tol_1\n        break\n    if abs(z_list[-1] - z_list[-2])<tol_2:\n        print \"cost values within tolerance \", tol_2\n        break\n    a_old = a_new\n    direction = - dcost(a_old)\n    a_new = a_old + h * direction\n    a_list.append(a_new)\n    z_list.append(cost(a_new))\n\n\nprint \"Local minimum occurs at:\", a_new\nprint \"Number of steps:\", len(a_list)\nprint \"minimum value is:\", cost(a_new)","output":{"0":{"name":"stdout","output_type":"stream","text":"Starting with initial coefficients [ 0.78527635  0.37198924  0.45337796  0.68734573  0.01840978  0.29989482]\n"},"1":{"name":"stdout","output_type":"stream","text":"cost values within tolerance  0.005\nLocal minimum occurs at: [ 0.9391329   0.48215464  0.51647122  0.50767884 -0.83390404  0.18134693]\nNumber of steps: 16593\nminimum value is: 1273.92486979\n"}},"cell_type":"code","exec_count":10}
{"type":"cell","id":"362e18","pos":3,"input":"# load the data:\ndata=np.load('datafile.npy')\nfig = plt.figure()\naxes = fig.add_axes([0.1, 0.1, 0.9, 0.7]) \naxes.scatter(data[:,0],data[:,1],c=\"r\");","output":{"0":{"data":{"image/png":"6eb04ad0838fe5c3e586aa946c12a184ab112b41"},"output_type":"execute_result","exec_count":3}},"cell_type":"code","exec_count":3}
{"type":"cell","id":"376e72","pos":6,"input":"def p(x,a): # a=[a0,a1,...,ad]\n    mysum=0\n    for i in range(len(a)):\n        mysum+=a[i]*x**i\n    return mysum","cell_type":"code","exec_count":4}
{"type":"cell","id":"f618a3","pos":1,"input":"import numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt","cell_type":"code","exec_count":1}
{"type":"cell","id":"159f7e","pos":7,"input":"p(2,[3,2,-1,1]) # means 3+2*2-1*2^2+1*2^3","output":{"0":{"data":{"text/plain":"11"},"output_type":"execute_result","exec_count":5}},"cell_type":"code","exec_count":5}
{"type":"cell","id":"2034ed","pos":14,"input":"### Plot the results","cell_type":"markdown"}
{"type":"cell","id":"86751e","pos":18,"input":"Here's a picture showing a few of the steps along the way","cell_type":"markdown"}
{"type":"cell","id":"b4f366","pos":4,"input":"The problem is to find the best degree five polynomial to fit the given data","cell_type":"markdown"}
{"type":"file","last_load":1505915520221}
{"type":"settings","kernel":"anaconda3","backend_state":"running","metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.13"}},"kernel_state":"idle"}
{"type":"cell","id":"4b380b","pos":19,"input":"y0 = p(x,a_list[0])\ny10 = p(x,a_list[10])\ny1000 = p(x,a_list[1000])\ny2000 = p(x,a_list[2000])\nyfinal = p(x,a_list[-1])\nfig = plt.figure()\naxes = fig.add_axes([0.1, 0.1, 0.9, 0.7])\naxes.plot(x,y0,label=\"initial p\")\naxes.plot(x,y10,label=\"10th step\")\naxes.plot(x,y1000,label=\"1000th step\")\naxes.plot(x,y2000,label=\"2000th step\")\naxes.plot(x,yfinal,label=\"final step\")\naxes.scatter(data[:,0],data[:,1])\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n\nmatplotlib.pyplot.ylim(ymax = 150, ymin = -20);","output":{"0":{"data":{"image/png":"8b08715129a9ef8787636f7fcc5e8fdca976e9d3"},"output_type":"execute_result","exec_count":13}},"cell_type":"code","exec_count":13}
{"type":"cell","id":"bddca2","pos":10,"input":"cost([3,2,-1])","output":{"0":{"data":{"text/plain":"8437.0400626890114"},"output_type":"execute_result","exec_count":7}},"cell_type":"code","exec_count":7}
{"type":"cell","id":"696f82","pos":16,"input":"Here's a plot of the data with our solution for a good $5$-th degree fit","cell_type":"markdown"}
{"type":"cell","id":"ab6a7f","pos":15,"input":"x = np.linspace(0,5,1001)\ny = p(x,a_new)","cell_type":"code","exec_count":11}
{"type":"cell","id":"60a074","pos":12,"input":"### Gradient descent to find a good fit","cell_type":"markdown"}
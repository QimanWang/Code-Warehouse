{"type":"settings","kernel":"python2","backend_state":"running","trust":false,"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.13"}},"kernel_state":"idle"}
{"type":"cell","id":"9e3bfd","pos":26,"input":"Study this notebook to prepare for Tuesday's class.  Try to invite other students to collaborate on a project.  ","cell_type":"markdown","collapsed":true}
{"type":"cell","id":"eac46d","pos":13,"input":"p(x).subs(mycoeffs)","output":{"0":{"data":{"text/plain":"x**2*(y0*(x1 - x2) - y1*(x0 - x2) + y2*(x0 - x1))/(x0**2*x1 - x0**2*x2 - x0*x1**2 + x0*x2**2 + x1**2*x2 - x1*x2**2) + x*(-y0*(x1**2 - x2**2) + y1*(x0**2 - x2**2) - y2*(x0**2 - x1**2))/(x0**2*x1 - x0**2*x2 - x0*x1**2 + x0*x2**2 + x1**2*x2 - x1*x2**2) + (x0*x1*y2*(x0 - x1) - x0*x2*y1*(x0 - x2) + x1*x2*y0*(x1 - x2))/(x0**2*x1 - x0**2*x2 - x0*x1**2 + x0*x2**2 + x1**2*x2 - x1*x2**2)"},"output_type":"execute_result","exec_count":63}},"cell_type":"code","exec_count":63}
{"type":"cell","id":"b0dfaf","pos":16,"input":"def mynewx(x,y):\n    return ( (x[0]**2*y[1] - x[0]**2*y[2] - x[1]**2*y[0] + x[1]**2*y[2] + x[2]**2*y[0] - x[2]**2*y[1])\n/(2*(x[0]*y[1] -x[0]*y[2] - x[1]*y[0] + x[1]*y[2] + x[2]*y[0] - x[2]*y[1])))","cell_type":"code","exec_count":65}
{"type":"cell","id":"cd7d10","pos":14,"input":"Now, let's find the minimum.  That will be where the derivative is zero.","cell_type":"markdown"}
{"type":"file","last_load":1506448197670}
{"type":"cell","id":"45a32e","pos":20,"input":"## Let's incorporate this idea into gradient descent","cell_type":"markdown"}
{"type":"cell","id":"b3e5ea","pos":27,"input":"","cell_type":"code","exec_count":0}
{"type":"cell","id":"8db441","pos":17,"input":"def q(x):\n    return (x-11)*(x-15)","cell_type":"code","exec_count":66}
{"type":"cell","id":"6a4470","pos":5,"input":"a0,a1,a2 = symbols(\"a0,a1,a2\")\nx0,x1,x2 = symbols(\"x0,x1,x2\")\ny0,y1,y2 = symbols(\"y0,y1,y2\")\nx = Symbol(\"x\")","cell_type":"code","exec_count":58}
{"type":"cell","id":"2c03ba","pos":0,"input":"# Some symbolic computations","cell_type":"markdown"}
{"type":"cell","id":"9101ec","pos":21,"input":"def f(x):\n    return  x**4 - 3 * x**3+2\nx = np.linspace(0,6,1001)\ny = f(x)\nfig = plt.figure()\naxes = fig.add_axes([0.1, 0.1, 0.9, 0.7])\naxes.plot(x,y, label=r'$y = x^4 - 3  x^3+2$')\naxes.legend(loc=2); # upper left corner;","output":{"0":{"data":{"image/png":"e6a5ae7c9394d8e7e90e1def3b3fb30a8992b939"},"output_type":"execute_result","exec_count":69}},"cell_type":"code","exec_count":69}
{"type":"cell","id":"d0018b","pos":8,"input":"solve([p(x0)-y0, p(x1)-y1,p(x2)-y2], [a0,a1,a2])","output":{"0":{"data":{"text/plain":"{a0: (x0*x1*y2*(x0 - x1) - x0*x2*y1*(x0 - x2) + x1*x2*y0*(x1 - x2))/(x0**2*x1 - x0**2*x2 - x0*x1**2 + x0*x2**2 + x1**2*x2 - x1*x2**2),\n a2: (y0*(x1 - x2) - y1*(x0 - x2) + y2*(x0 - x1))/(x0**2*x1 - x0**2*x2 - x0*x1**2 + x0*x2**2 + x1**2*x2 - x1*x2**2),\n a1: (-y0*(x1**2 - x2**2) + y1*(x0**2 - x2**2) - y2*(x0**2 - x1**2))/(x0**2*x1 - x0**2*x2 - x0*x1**2 + x0*x2**2 + x1**2*x2 - x1*x2**2)}"},"output_type":"execute_result","exec_count":60}},"cell_type":"code","exec_count":60}
{"type":"cell","id":"91e643","pos":19,"input":"mynewx([0,5,10],[176,66,6])","output":{"0":{"data":{"text/plain":"13"},"output_type":"execute_result","exec_count":68}},"cell_type":"code","exec_count":68}
{"type":"cell","id":"349169","pos":10,"input":"mycoeffs=solve([p(x0)-y0, p(x1)-y1,p(x2)-y2], [a0,a1,a2])","cell_type":"code","exec_count":61}
{"type":"cell","id":"124c45","pos":7,"input":"Let's solve for the unique quadratic polynomial passing through three points","cell_type":"markdown"}
{"type":"cell","id":"2e577d","pos":22,"input":"start_time = time.time()\ncur_x = 6 # The algorithm starts at x=6\ngamma = 0.001 # step size multiplier\nprecision = 0.00001\nprevious_step_size = cur_x\n\nx_list = [cur_x]; y_list = [f(cur_x)]\n\ndef df(x):\n    return 4 * x**3 - 9 * x**2\n\nwhile previous_step_size > precision:\n    prev_x = cur_x\n    cur_x += -gamma * df(prev_x)\n    previous_step_size = abs(cur_x - prev_x)\n    x_list.append(cur_x)\n    y_list.append(f(cur_x))\n\nprint \"Local minimum occurs at:\", cur_x\nprint \"Number of steps:\", len(x_list)\nprint \"Minimum value:\", f(cur_x)\n\nprint(\"--- %s seconds ---\" % (time.time() - start_time))","output":{"0":{"name":"stdout","output_type":"stream","text":"Local minimum occurs at: 2.25047815041\nNumber of steps: 359\nMinimum value: -6.54296643449\n--- 0.00478196144104 seconds ---\n"}},"cell_type":"code","exec_count":70}
{"type":"cell","id":"57ceac","pos":9,"input":"The result is a dictionary.  Let's save the solution.","cell_type":"markdown"}
{"type":"cell","id":"8fb969","pos":6,"input":"p = lambdify([x], a0+a1*x+a2*x**2 , 'numpy') # general quadratic function","cell_type":"code","exec_count":59}
{"type":"cell","id":"1cb489","pos":12,"input":"Let's replace the symbolic coefficients in our polynomial with the ones obtained from solving the equations.","cell_type":"markdown"}
{"type":"cell","id":"d0fd32","pos":1,"input":"If you've finished \"A whirlwind tour of python\" I recommend checking out the excellent scientific python lectures by J.R. Johansson, which you can find at <a href=\"https://github.com/jrjohansson/scientific-python-lectures\">https://github.com/jrjohansson/scientific-python-lectures</a>.  You're in a good position to work through lectures 1-4.  Here, I'm going to use a little sympy, which is lecture 5.","cell_type":"markdown"}
{"type":"cell","id":"14159f","pos":18,"input":"print q(0),q(5),q(10)","output":{"0":{"name":"stdout","output_type":"stream","text":"165 60 5\n"}},"cell_type":"code","exec_count":67}
{"type":"cell","id":"66facb","pos":15,"input":"simplify(solve(diff(p(x).subs(mycoeffs), x),x))","output":{"0":{"data":{"text/plain":"[(x0**2*y1 - x0**2*y2 - x1**2*y0 + x1**2*y2 + x2**2*y0 - x2**2*y1)/(2*(x0*y1 - x0*y2 - x1*y0 + x1*y2 + x2*y0 - x2*y1))]"},"output_type":"execute_result","exec_count":64}},"cell_type":"code","exec_count":64}
{"type":"cell","id":"4a38e3","pos":24,"input":"import time\nstart_time = time.time()\ncur_x = 6 # The algorithm starts at x=6\ngamma = 0.001 # step size multiplier\nprecision = 0.00001\nprevious_step_size = cur_x\n\nx_list2 = [cur_x]; y_list2 = [f(cur_x)]\n\ndef df(x):\n    return 4 * x**3 - 9 * x**2\n\nwhile previous_step_size > precision:\n    prev_x = cur_x\n    x0=cur_x\n    x1=cur_x-gamma * df(cur_x)\n    x2=cur_x-2*gamma * df(cur_x)\n    y0=f(x0)\n    y1=f(x1)\n    y2=f(x2)\n    if (x0*y1 -x0*y2 - x1*y0 + x1*y2 + x2*y0 - x2*y1)==0:\n        break\n    cur_x=mynewx([x0,x1,x2],[y0,y1,y2])\n    previous_step_size = abs(cur_x - prev_x)\n    x_list2.append(cur_x)\n    y_list2.append(f(cur_x))\n\nprint \"Local minimum occurs at:\", cur_x\nprint \"Number of steps:\", len(x_list2)\nprint \"Minimum value:\", f(cur_x)\n\nprint(\"--- %s seconds ---\" % (time.time() - start_time))","output":{"0":{"name":"stdout","output_type":"stream","text":"Local minimum occurs at: 2.24991394148\nNumber of steps: 14\nMinimum value: -6.54296867502\n--- 0.00193810462952 seconds ---\n"}},"cell_type":"code","exec_count":72}
{"type":"cell","id":"74213c","pos":11,"input":"mycoeffs[a0]","output":{"0":{"data":{"text/plain":"(x0*x1*y2*(x0 - x1) - x0*x2*y1*(x0 - x2) + x1*x2*y0*(x1 - x2))/(x0**2*x1 - x0**2*x2 - x0*x1**2 + x0*x2**2 + x1**2*x2 - x1*x2**2)"},"output_type":"execute_result","exec_count":62}},"cell_type":"code","exec_count":62}
{"type":"cell","id":"6f0398","pos":23,"input":"def mynewx(x,y):\n    return ( (x[0]**2*y[1] - x[0]**2*y[2] - x[1]**2*y[0] + x[1]**2*y[2] + x[2]**2*y[0] - x[2]**2*y[1])\n/(2*(x[0]*y[1] -x[0]*y[2] - x[1]*y[0] + x[1]*y[2] + x[2]*y[0] - x[2]*y[1])))","cell_type":"code","exec_count":71}
{"type":"cell","id":"983bdf","pos":2,"input":"%matplotlib inline\nimport matplotlib.pyplot as plt","cell_type":"code","exec_count":55}
{"type":"cell","id":"a95c3b","pos":25,"input":"# Exercise","cell_type":"markdown"}
{"type":"cell","id":"3d67b4","pos":3,"input":"import numpy as np","cell_type":"code","exec_count":56}
{"type":"cell","id":"7aafe5","pos":4,"input":"from sympy import *","cell_type":"code","exec_count":57}
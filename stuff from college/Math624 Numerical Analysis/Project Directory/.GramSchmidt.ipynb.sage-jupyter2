{"type":"settings","kernel":"python2","backend_state":"running","trust":true,"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.13"}},"kernel_state":"idle"}
{"type":"cell","id":"1604a1","pos":24,"input":"The criterion stated for approximating ``as well as possible'' means that $u(x)$ is the polynomial closest to $\\sin(x)$, using the norm defined by the innter product\n\n$$\\langle f,g \\rangle = \\int_{-\\pi}^{\\pi}f(x)g(x)\\,dx.$$\n\nWe can find $u$ by othogonal projection of $\\sin(x)$ on the subspace $U$ of polynomials of degree $\\leq 5.$  For this, we first find an orthonormal basis for $U$.","cell_type":"markdown"}
{"output":{"0":{"text":"[[ 1.  2.  3.]\n [ 1.  1.  1.]\n [ 0.  1.  0.]]\n","name":"stdout"}},"exec_count":3,"start":1507992493146,"input":"myvecs=np.array([[1.0,2,3],[1.0,1,1],[0,1,0]])\nprint myvecs","state":"done","pos":4,"cell_type":"code","type":"cell","end":1507992493157,"id":"f061e7","kernel":"python2"}
{"type":"cell","id":"fc5077","pos":17,"input":"\"Integrate\" is a function from sympy that we can drop in and use for this demonstration.  In an enterprise application, you'd probably be better off doing numerical integration, something like quad from scipy.integrate.","cell_type":"markdown"}
{"type":"cell","id":"f4b915","pos":22,"input":"Compare our results to Axler's example.","cell_type":"markdown"}
{"start":1507831313277,"input":"ip3(sin(x),x**3)","state":"done","pos":38,"cell_type":"code","type":"cell","end":1507831313277,"id":"1de568","kernel":"python2"}
{"start":1507831313266,"input":"u=0\nfor p in myE:\n    u+= ip3(sin(x),p) * p\nprint u","scrolled":true,"state":"done","pos":32,"cell_type":"code","type":"cell","end":1507831313266,"id":"5760f9","kernel":"python2"}
{"start":1507831313246,"input":"mye=gram_schmidt(myvecs)","state":"done","pos":5,"cell_type":"code","type":"cell","end":1507831313246,"id":"df6c63","kernel":"python2"}
{"start":1507831313265,"input":"for p in myE:\n    print p","state":"done","pos":30,"cell_type":"code","type":"cell","end":1507831313265,"id":"a36e08","kernel":"python2"}
{"start":1507831313278,"input":"k=5 # max degree\nmyF=[] # initialize the output with zeros\nfor i in range(k+1):\n    fi=x**i\n    for j in range(i):\n        fi+=-ip3(myF[j],x**i)*myF[j]\n    myF.append(fi/(sqrt(ip3(fi,fi))))","state":"done","pos":39,"cell_type":"code","type":"cell","end":1507831313278,"id":"55ea9f","kernel":"python2"}
{"type":"cell","id":"762743","pos":2,"input":"## In $\\mathbb{R}^n$\nFirst, let's write a simple program that implements the Gram-Schmidt process for a list of vectors in $\\mathbb{R}^n$ using the ordinary dot product for the inner product.","cell_type":"markdown"}
{"type":"cell","id":"d584cf","pos":35,"input":"### One more inner product","cell_type":"markdown"}
{"type":"cell","id":"27cd5d","pos":19,"input":"Now, we can find an orhtonormal basis for the space of polynomials of degree $\\leq 2$.","cell_type":"markdown"}
{"type":"cell","id":"74945a","pos":25,"input":"We have to change the limits of integration, but we'll make another change too.  We'll introduce a numerical integration.","cell_type":"markdown"}
{"start":1507831313246,"input":"print mye[0]\nprint mye[1]\nprint mye[2]","state":"done","pos":6,"cell_type":"code","type":"cell","end":1507831313246,"id":"b9199b","kernel":"python2"}
{"start":1507831313280,"input":"v=0\nfor p in myF:\n    v+= ip3(sin(x),p) * p\nprint v","state":"done","pos":42,"cell_type":"code","type":"cell","end":1507831313280,"id":"e9d710","kernel":"python2"}
{"start":1507831313282,"input":"myplot=plot(sin(x),u,v,(x,.5,.7),ylim=[.5,.7],show=False)\nmyplot[0].line_color = 'r'\nmyplot[2].line_color = 'g'\nmyplot.show()","state":"done","pos":44,"cell_type":"code","type":"cell","end":1507831313282,"id":"1e1f98","kernel":"python2"}
{"start":1507831313253,"input":"from math import pi # we want this later","state":"done","pos":14,"cell_type":"code","type":"cell","end":1507831313253,"id":"8ac0f5","kernel":"python2"}
{"type":"file","last_load":1507830739607}
{"start":1507831313276,"input":"def ip3(f,g):\n    xvals=np.linspace(-3,3,6)\n    out=0\n    for xval in xvals:\n        out+=f.subs(x,xval)*g.subs(x,xval)\n    return out","state":"done","pos":37,"cell_type":"code","type":"cell","end":1507831313276,"id":"d22437","kernel":"python2"}
{"start":1507831313279,"input":"for p in myF:\n    print p","state":"done","pos":41,"cell_type":"code","type":"cell","end":1507831313279,"id":"a2fa0c","kernel":"python2"}
{"type":"cell","id":"657f0d","pos":33,"input":"Here's a picture:  the sine is in red, the approximation $u$ is in blue.  The fifth degree Taylor polynomial is in green.","cell_type":"markdown"}
{"start":1507831313248,"input":"for i in range(3):\n    for j in range(3):\n        print \"i=\",i,\"j=\",j,\" <ei,ej>=\",np.dot(mye[i],mye[j])","state":"done","pos":8,"cell_type":"code","type":"cell","end":1507831313248,"id":"3b170a","kernel":"python2"}
{"start":1507831313257,"input":"ip2(sin(x),exp(x))","state":"done","pos":18,"cell_type":"code","type":"cell","end":1507831313257,"id":"e112e7","kernel":"python2"}
{"start":1507831313267,"input":"myplot=plot(sin(x),u,x-x**3 /6.+x**5 / 120.0,(x,-4,4),ylim=[-1,1],show=False)\nmyplot[0].line_color = 'r'\nmyplot[2].line_color = 'g'\nmyplot.show()","state":"done","pos":34,"cell_type":"code","type":"cell","end":1507831313267,"id":"226bc4","kernel":"python2"}
{"exec_count":1,"start":1507992486854,"input":"import numpy as np","state":"done","pos":1,"cell_type":"code","type":"cell","end":1507992486856,"id":"1143d8","kernel":"python2"}
{"type":"cell","id":"5479cc","pos":9,"input":"## Example using polynomials and a different inner product","cell_type":"markdown"}
{"type":"cell","id":"b4ae6e","pos":46,"input":"# Project: Approximate the sine in six ways.  \n\nFind a cubic polynomial $u$ that best approximates $\\sin(t)$ in the sense that $\\|u(t)-\\sin(t)\\|$ is minimized.  The definition of the norm $\\| \\qquad \\|$, however, depends on a choice of inner product.  Here are six different ways to define inner products on the vector space of polynomials of degree less than or equal to $3$.\n\n\\begin{align*}\n\\langle f,g\\rangle_6&=f(3)g(3)+f'(3)g'(3)+f''(3)g''(3)+f'''(3)g'''(3)\\\\\n \\langle f,g\\rangle_5&=\\int_0^6 f(t)g(t)dt \\\\\n \\langle f,g\\rangle_3&=f(0)g(0)+f(2)g(2)+f(4)g(4)+f(6)g(6)\\\\\n\\langle f,g\\rangle_2&=f(1)g(1)+f'(1)g'(1)+f(5)g(5)+f'(5)g'(5)\\\\\n \\langle f,g\\rangle_4&=f(0)g(0)+f(3)g(3)+f'(3)g'(3)+f(6)g(6)\\\\\n \\langle f,g\\rangle_1&=f(0)g(0)+f'(0)g'(0)+f(6)g(6)+f'(6)g'(6)\n\\end{align*}\n\n\nI encourage you to work in groups and turn in one assignment per group.  Write your solutions in a seperate Jupyter notebook.  Write clearly documented code, create some good pictures, and write observations and conclusions.","cell_type":"markdown"}
{"start":1507831313249,"input":"from sympy import *","state":"done","pos":11,"cell_type":"code","type":"cell","end":1507831313249,"id":"faa47b","kernel":"python2"}
{"start":1507831313264,"input":"k=5 # max degree\nmyE=[] # initialize the output with zeros\nfor i in range(k+1):\n    fi=x**i\n    for j in range(i):\n        fi+=-ip3(myE[j],x**i)*myE[j]\n    myE.append(fi/(sqrt(ip3(fi,fi))))","state":"done","pos":29,"cell_type":"code","type":"cell","end":1507831313264,"id":"97e421","kernel":"python2"}
{"start":1507831313255,"input":"def ip2(f,g):\n    return integrate(f*g,(x,-1,1))","state":"done","pos":16,"cell_type":"code","type":"cell","end":1507831313255,"id":"c5bdf7","kernel":"python2"}
{"type":"cell","id":"ffc534","pos":31,"input":"Now, we orthogonally project $\\sin(x)$ onto $U$.","cell_type":"markdown"}
{"start":1507831313283,"input":"myplot=plot(sin(x),u,v,(x,1.2,1.4),ylim=[.9,1.05],show=False)\nmyplot[0].line_color = 'r'\nmyplot[2].line_color = 'g'\nmyplot.show()","state":"done","pos":45,"cell_type":"code","type":"cell","end":1507831313283,"id":"6994ef","kernel":"python2"}
{"start":1507831313276,"input":"np.linspace(-3,3,6)","state":"done","pos":36,"cell_type":"code","type":"cell","end":1507831313276,"id":"b36e0d","kernel":"python2"}
{"type":"cell","id":"6e8d3f","pos":43,"input":"Here are a few closeups","cell_type":"markdown"}
{"type":"cell","id":"85f27c","pos":10,"input":"In example 6.33 of Axler's book, he consders the vector space $V$ of continuous functions on $[-1,1]$ and defines the inner product by\n$$\\langle f, g\\rangle = \\int_{-1}^{1} f(x)g(x) \\,dx.$$\nLet's import sympy and declare $x$ as a variable so we can easily define and manipulate functions.","cell_type":"markdown"}
{"type":"cell","id":"c96f49","pos":7,"input":"Look, the results are orthonormal, up to many significant digits","cell_type":"markdown"}
{"start":1507831313250,"input":"x = Symbol('x')","state":"done","pos":12,"cell_type":"code","type":"cell","end":1507831313250,"id":"59ac8f","kernel":"python2"}
{"type":"cell","id":"2732f2","pos":0,"input":"# Gram Schmidt Process - Examples, code, Exercises\n\nA great reference for this is Examples 6.33 and 6.58 in Sheldon Axler's <a href=\"http://linear.axler.net\"><em>Linear Algebra Done Right</em></a>, from <a href=\"http://linear.axler.net/InnerProduct.pdf\">the chapter on Inner Product Spaces</a>.","cell_type":"markdown"}
{"exec_count":2,"start":1507992488845,"input":"def gram_schmidt(M):\n    # M is a list of vectors\n    k=len(M)\n    E=[] # initialize the output\n    for i in range(k):\n        fi=M[i] # fi is the i-th vector of M\n        for j in range(i): # This loop only exists when i>0\n            fi+=-np.dot(E[j],M[i])*E[j]\n        E.append(1/np.sqrt(np.dot(fi,fi))*fi)\n    return E","state":"done","pos":3,"cell_type":"code","type":"cell","end":1507992488848,"id":"634bed","kernel":"python2"}
{"type":"cell","id":"83ecb9","pos":23,"input":"## Now, example 6.58\nFind a polynomial $u$ with real coefficients and degree at most $5$ that approximates $\\sin(x)$ as well as possible on the interval $[-\\pi,\\pi]$\nthe sense that \n\n$$\\int_{-\\pi}^{\\pi} |\\sin(x)-u(x)|^2 \\, dx$$\n\nis as small as possible. Compare this result to the Taylor series approximation.","cell_type":"markdown"}
{"start":1507831313262,"input":"def ip3(f,g):\n    h=f*g;\n    return integrate.quad(lambda t: h.subs(x,t),-pi,pi)[0]","state":"done","pos":27,"cell_type":"code","type":"cell","end":1507831313262,"id":"cd5154","kernel":"python2"}
{"start":1507831313252,"input":"import scipy.integrate as integrate","state":"done","pos":13,"cell_type":"code","type":"cell","end":1507831313252,"id":"b490a9","kernel":"python2"}
{"start":1507831313259,"input":"import scipy.integrate as integrate","state":"done","pos":26,"cell_type":"code","type":"cell","end":1507831313259,"id":"4bb214","kernel":"python2"}
{"type":"cell","id":"8e01e2","pos":40,"input":"","cell_type":"code"}
{"start":1507831313257,"input":"k=2 # max degree\nmyE=[] # initialize the output with zeros\nfor i in range(k+1):\n    fi=x**i\n    for j in range(i):\n        fi+=-ip2(myE[j],x**i)*myE[j]\n    myE.append(fi/(sqrt(ip2(fi,fi))))","state":"done","pos":20,"cell_type":"code","type":"cell","end":1507831313257,"id":"247b9b","kernel":"python2"}
{"start":1507831313258,"input":"for p in myE:\n    print p","state":"done","pos":21,"cell_type":"code","type":"cell","end":1507831313258,"id":"68a128","kernel":"python2"}
{"start":1507831313263,"input":"ip3(sin(x),x**3)","state":"done","pos":28,"cell_type":"code","type":"cell","end":1507831313263,"id":"eba3b0","kernel":"python2"}
{"start":1507831313254,"input":"pi","state":"done","pos":15,"cell_type":"code","type":"cell","end":1507831313254,"id":"8be8b0","kernel":"python2"}
{"start":1507831313244,"input":"e0=np.array([1.0,2.0,3.0])\nmye0 = gram_schmidt(e0)\nmye0","state":"done","pos":4.5,"type":"cell","end":1507831313244,"id":"603d9e","kernel":"python2"}
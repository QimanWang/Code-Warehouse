{"type":"settings","kernel":"python2","backend_state":"running","trust":false,"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.13"}},"kernel_state":"idle"}
{"type":"cell","id":"ad52ee","pos":6,"input":"print mye[0]\nprint mye[1]\nprint mye[2]","output":{"0":{"name":"stdout","output_type":"stream","text":"[ 0.26726124  0.53452248  0.80178373]\n[ 0.87287156  0.21821789 -0.43643578]\n[-0.40824829  0.81649658 -0.40824829]\n"}},"cell_type":"code","exec_count":5}
{"type":"cell","id":"11422f","pos":4,"input":"myvecs=np.array([[1.0,2,3],[1.0,1,1],[0,1,0]])\nprint myvecs","output":{"0":{"name":"stdout","output_type":"stream","text":"[[ 1.  2.  3.]\n [ 1.  1.  1.]\n [ 0.  1.  0.]]\n"}},"cell_type":"code","exec_count":3}
{"type":"cell","id":"e0179a","pos":32,"input":"u=0\nfor p in myE:\n    u+= ip3(sin(x),p) * p\nprint u","output":{"0":{"name":"stdout","output_type":"stream","text":"0.00564311797634686*x**5 - 0.155271410633429*x**3 + 0.987862135574676*x\n"}},"cell_type":"code","exec_count":89,"scrolled":true}
{"type":"cell","id":"822c80","pos":36,"input":"np.linspace(-3,3,6)","output":{"0":{"data":{"text/plain":"array([-3. , -1.8, -0.6,  0.6,  1.8,  3. ])"},"output_type":"execute_result","exec_count":132}},"cell_type":"code","exec_count":132}
{"type":"cell","id":"d4d60e","pos":35,"input":"### One more inner product","cell_type":"markdown"}
{"type":"cell","id":"1dc574","pos":1,"input":"import numpy as np","cell_type":"code","exec_count":1}
{"type":"cell","id":"a3bdf9","pos":33,"input":"Here's a picture:  the sine is in red, the approximation $u$ is in blue.  The fifth degree Taylor polynomial is in green.","cell_type":"markdown"}
{"type":"cell","id":"9caf5f","pos":8,"input":"for i in range(3):\n    for j in range(3):\n        print \"i=\",i,\"j=\",j,\" <ei,ej>=\",np.dot(mye[i],mye[j])","output":{"0":{"name":"stdout","output_type":"stream","text":"i= 0 j= 0  <ei,ej>= 1.0\ni= 0 j= 1  <ei,ej>= -1.66533453694e-16\ni= 0 j= 2  <ei,ej>= 0.0\ni= 1 j= 0  <ei,ej>= -1.66533453694e-16\ni= 1 j= 1  <ei,ej>= 1.0\ni= 1 j= 2  <ei,ej>= -2.77555756156e-17\ni= 2 j= 0  <ei,ej>= 0.0\ni= 2 j= 1  <ei,ej>= -2.77555756156e-17\ni= 2 j= 2  <ei,ej>= 1.0\n"}},"cell_type":"code","exec_count":6}
{"type":"cell","id":"a5863e","pos":24,"input":"The criterion stated for approximating ``as well as possible'' means that $u(x)$ is the polynomial closest to $\\sin(x)$, using the norm defined by the innter product\n\n$$\\langle f,g \\rangle = \\int_{-\\pi}^{\\pi}f(x)g(x)\\,dx.$$\n\nWe can find $u$ by othogonal projection of $\\sin(x)$ on the subspace $U$ of polynomials of degree $\\leq 5.$  For this, we first find an orthonormal basis for $U$.","cell_type":"markdown"}
{"type":"cell","id":"ed7cb3","pos":10,"input":"In example 6.33 of Axler's book, he consders the vector space $V$ of continuous functions on $[-1,1]$ and defines the inner product by\n$$\\langle f, g\\rangle = \\int_{-1}^{1} f(x)g(x) \\,dx.$$\nLet's import sympy and declare $x$ as a variable so we can easily define and manipulate functions.","cell_type":"markdown"}
{"type":"cell","id":"4d3bbe","pos":5,"input":"mye=gram_schmidt(myvecs)","cell_type":"code","exec_count":4}
{"type":"cell","id":"ecb95c","pos":45,"input":"myplot=plot(sin(x),u,v,(x,1.2,1.4),ylim=[.9,1.05],show=False)\nmyplot[0].line_color = 'r'\nmyplot[2].line_color = 'g'\nmyplot.show()","output":{"0":{"data":{"image/png":"ed92d69a1b48f859dc881d321d65eefb1548409d"},"output_type":"execute_result","exec_count":150}},"cell_type":"code","exec_count":150}
{"type":"file","last_load":1507660926888}
{"type":"cell","id":"b4a447","pos":28,"input":"ip3(sin(x),x**3)","output":{"0":{"data":{"text/plain":"24.313441517522115"},"output_type":"execute_result","exec_count":84}},"cell_type":"code","exec_count":84}
{"type":"cell","id":"61179f","pos":15,"input":"pi","output":{"0":{"data":{"text/plain":"3.141592653589793"},"output_type":"execute_result","exec_count":5}},"cell_type":"code","exec_count":5}
{"type":"cell","id":"e6fc5b","pos":41,"input":"for p in myF:\n    print p","output":{"0":{"name":"stdout","output_type":"stream","text":"sqrt(6)/6\n0.199204768222399*x + 2.21161720295625e-17\n0.113655151164579*x**2 + 2.01089350016141e-17*x - 0.477351634891233\n0.0718900455729099*x**3 - 0.522784411406201*x + 5.81045802328965e-18\n0.0531634056525003*x**4 - 0.519482420947289*x**2 - 9.19117007040307e-17*x + 0.558088167177687\n0.0531634056525003*x**5 + 3.81565757201043e-16*x**4 - 0.616695505569003*x**3 - 3.72844254179305e-15*x**2 + 1.26502171854679*x + 3.59823467707938e-15\n"}},"cell_type":"code","exec_count":141}
{"type":"cell","id":"98d0ec","pos":44,"input":"myplot=plot(sin(x),u,v,(x,.5,.7),ylim=[.5,.7],show=False)\nmyplot[0].line_color = 'r'\nmyplot[2].line_color = 'g'\nmyplot.show()","output":{"0":{"data":{"image/png":"4800178bf428ae82999e5b240c839fb0126711f8"},"output_type":"execute_result","exec_count":146}},"cell_type":"code","exec_count":146}
{"type":"cell","id":"d20e23","pos":22,"input":"Compare our results to Axler's example.","cell_type":"markdown"}
{"type":"cell","id":"2f0050","pos":34,"input":"myplot=plot(sin(x),u,x-x**3 /6.+x**5 / 120.0,(x,-4,4),ylim=[-1,1],show=False)\nmyplot[0].line_color = 'r'\nmyplot[2].line_color = 'g'\nmyplot.show()","output":{"0":{"data":{"image/png":"d148127b2e52cbb4163b5c89aece928debd1c414"},"output_type":"execute_result","exec_count":93}},"cell_type":"code","exec_count":93}
{"type":"cell","id":"72131f","pos":30,"input":"for p in myE:\n    print p","output":{"0":{"name":"stdout","output_type":"stream","text":"0.398942280401433\n0.219948406790773*x\n0.135577175410079*x**2 - 0.446031029038193\n0.0851039026947899*x**3 - 0.503965111551828*x\n0.0537538886225829*x**4 - 0.454739670621524*x**2 + 0.448810065451612\n0.0340492544849719*x**5 - 0.373391857687433*x**3 + 0.789692126134889*x\n"}},"cell_type":"code","exec_count":86}
{"type":"cell","id":"1b98ae","pos":21,"input":"for p in myE:\n    print p","output":{"0":{"name":"stdout","output_type":"stream","text":"sqrt(2)/2\nsqrt(6)*x/2\n3*sqrt(10)*(x**2 - 1/3)/4\n"}},"cell_type":"code","exec_count":24}
{"type":"cell","id":"f3517a","pos":0,"input":"# Gram Schmidt Process - Examples, code, Exercises\n\nA great reference for this is Examples 6.33 and 6.58 in Sheldon Axler's <a href=\"http://linear.axler.net\"><em>Linear Algebra Done Right</em></a>, from <a href=\"http://linear.axler.net/InnerProduct.pdf\">the chapter on Inner Product Spaces</a>.","cell_type":"markdown"}
{"type":"cell","id":"7a6829","pos":29,"input":"k=5 # max degree\nmyE=[] # initialize the output with zeros\nfor i in range(k+1):\n    fi=x**i\n    for j in range(i):\n        fi+=-ip3(myE[j],x**i)*myE[j]\n    myE.append(fi/(sqrt(ip3(fi,fi))))","cell_type":"code","exec_count":85}
{"type":"cell","id":"efecbb","pos":43,"input":"Here are a few closeups","cell_type":"markdown"}
{"type":"cell","id":"a05584","pos":11,"input":"from sympy import *","cell_type":"code","exec_count":2}
{"type":"cell","id":"52e10d","pos":20,"input":"k=2 # max degree\nmyE=[] # initialize the output with zeros\nfor i in range(k+1):\n    fi=x**i\n    for j in range(i):\n        fi+=-ip2(myE[j],x**i)*myE[j]\n    myE.append(fi/(sqrt(ip2(fi,fi))))","cell_type":"code","exec_count":22}
{"type":"cell","id":"88f4e8","pos":12,"input":"x = Symbol('x')","cell_type":"code","exec_count":3}
{"type":"cell","id":"9be226","pos":26,"input":"import scipy.integrate as integrate","cell_type":"code","exec_count":82}
{"type":"cell","id":"973531","pos":3,"input":"def gram_schmidt(M):\n    # M is a list of vectors\n    k=len(M)\n    E=[] # initialize the output\n    for i in range(k):\n        fi=M[i] # fi is the i-th vector of M\n        for j in range(i): # This loop only exists when i>0\n            fi+=-np.dot(E[j],M[i])*E[j]\n        E.append(1/np.sqrt(np.dot(fi,fi))*fi)\n    return E","cell_type":"code","exec_count":2}
{"type":"cell","id":"ae4b60","pos":13,"input":"import scipy.integrate as integrate","cell_type":"code","exec_count":10}
{"type":"cell","id":"79ca4c","pos":42,"input":"v=0\nfor p in myF:\n    v+= ip3(sin(x),p) * p\nprint v","output":{"0":{"name":"stdout","output_type":"stream","text":"0.00615078036331832*x**5 + 1.66628436800185e-17*x**4 - 0.161047089652637*x**3 - 1.51778812318291e-16*x**2 + 0.998250600131574*x + 4.42956011211322e-17\n"}},"cell_type":"code","exec_count":142}
{"type":"cell","id":"c9b9c1","pos":40,"input":"","cell_type":"code","exec_count":0}
{"type":"cell","id":"b0113f","pos":23,"input":"## Now, example 6.58\nFind a polynomial $u$ with real coefficients and degree at most $5$ that approximates $\\sin(x)$ as well as possible on the interval $[-\\pi,\\pi]$\nthe sense that \n\n$$\\int_{-\\pi}^{\\pi} |\\sin(x)-u(x)|^2 \\, dx$$\n\nis as small as possible. Compare this result to the Taylor series approximation.","cell_type":"markdown"}
{"type":"cell","id":"e77cff","pos":39,"input":"k=5 # max degree\nmyF=[] # initialize the output with zeros\nfor i in range(k+1):\n    fi=x**i\n    for j in range(i):\n        fi+=-ip3(myF[j],x**i)*myF[j]\n    myF.append(fi/(sqrt(ip3(fi,fi))))","cell_type":"code","exec_count":140}
{"type":"cell","id":"0c1b6a","pos":2,"input":"## In $\\mathbb{R}^n$\nFirst, let's write a simple program that implements the Gram-Schmidt process for a list of vectors in $\\mathbb{R}^n$ using the ordinary dot product for the inner product.","cell_type":"markdown"}
{"type":"cell","id":"3d11e6","pos":14,"input":"from math import pi # we want this later","cell_type":"code","exec_count":4}
{"type":"cell","id":"b0954a","pos":31,"input":"Now, we orthogonally project $\\sin(x)$ onto $U$.","cell_type":"markdown"}
{"type":"cell","id":"7bc635","pos":27,"input":"def ip3(f,g):\n    h=f*g;\n    return integrate.quad(lambda t: h.subs(x,t),-pi,pi)[0]","cell_type":"code","exec_count":83}
{"type":"cell","id":"3d1a3a","pos":9,"input":"## Example using polynomials and a different inner product","cell_type":"markdown"}
{"type":"cell","id":"ab7573","pos":38,"input":"ip3(sin(x),x**3)","output":{"0":{"data":{"text/plain":"19.2233647503028"},"output_type":"execute_result","exec_count":139}},"cell_type":"code","exec_count":139}
{"type":"cell","id":"17603a","pos":18,"input":"ip2(sin(x),exp(x))","output":{"0":{"data":{"text/plain":"-E*cos(1)/2 + exp(-1)*cos(1)/2 + exp(-1)*sin(1)/2 + E*sin(1)/2"},"output_type":"execute_result","exec_count":21}},"cell_type":"code","exec_count":21}
{"type":"cell","id":"f960bc","pos":46,"input":"# Project: Approximate the sine in six ways.  \n\nFind a cubic polynomial $u$ that best approximates $\\sin(t)$ in the sense that $\\|u(t)-\\sin(t)\\|$ is minimized.  The definition of the norm $\\| \\qquad \\|$, however, depends on a choice of inner product.  Here are six different ways to define inner products on the vector space of polynomials of degree less than or equal to $3$.\n\n\\begin{align*}\n\\langle f,g\\rangle_6&=f(3)g(3)+f'(3)g'(3)+f''(3)g''(3)+f'''(3)g'''(3)\\\\\n \\langle f,g\\rangle_5&=\\int_0^6 f(t)g(t)dt \\\\\n \\langle f,g\\rangle_3&=f(0)g(0)+f(2)g(2)+f(4)g(4)+f(6)g(6)\\\\\n\\langle f,g\\rangle_2&=f(1)g(1)+f'(1)g'(1)+f(5)g(5)+f'(5)g'(5)\\\\\n \\langle f,g\\rangle_4&=f(0)g(0)+f(3)g(3)+f'(3)g'(3)+f(6)g(6)\\\\\n \\langle f,g\\rangle_1&=f(0)g(0)+f'(0)g'(0)+f(6)g(6)+f'(6)g'(6)\n\\end{align*}\n\n\nI encourage you to work in groups and turn in one assignment per group.  Write your solutions in a seperate Jupyter notebook.  Write clearly documented code, create some good pictures, and write observations and conclusions.","cell_type":"markdown"}
{"type":"cell","id":"6c0003","pos":19,"input":"Now, we can find an orhtonormal basis for the space of polynomials of degree $\\leq 2$.","cell_type":"markdown"}
{"type":"cell","id":"62e0e9","pos":37,"input":"def ip3(f,g):\n    xvals=np.linspace(-3,3,6)\n    out=0\n    for xval in xvals:\n        out+=f.subs(x,xval)*g.subs(x,xval)\n    return out","cell_type":"code","exec_count":138}
{"type":"cell","id":"af7274","pos":25,"input":"We have to change the limits of integration, but we'll make another change too.  We'll introduce a numerical integration.","cell_type":"markdown"}
{"type":"cell","id":"f9d94e","pos":17,"input":"\"Integrate\" is a function from sympy that we can drop in and use for this demonstration.  In an enterprise application, you'd probably be better off doing numerical integration, something like quad from scipy.integrate.","cell_type":"markdown"}
{"type":"cell","id":"79b98d","pos":7,"input":"Look, the results are orthonormal, up to many significant digits","cell_type":"markdown"}
{"type":"cell","id":"c364cf","pos":16,"input":"def ip2(f,g):\n    return integrate(f*g,(x,-1,1))","cell_type":"code","exec_count":20}

Project 7: implement the Chain-code algorithm as taught in class.

   Both C++ and JAVA!!!

**************************************
Language: C++ and Java  
Due date: C++ soft copy: 3/14/2017 Tuesday before Midnight
	     Java soft copy: 3/15/2017 Wednesday before Midnight

Due date: C++ and Java hard copy: 3/16/2017 Thursday in class

*************************************

I. Inputs: Image file.

II. Outputs: You should have two output files: 
	outFile1 and outFile2 // Java use argv[1] and argv[2], C++ Use argv[2] and argv[3]

	- Use outFile1 for storing the chain-code output. 
	  // This output is a compression file. In real life, each chain code only use 3 bits!
        	 Output format: (only two text lines in outFile1)
			
		#rows #cols min max startRow startCol Label // one text line
		code1 code2 code3 .... // one long text line
	   
	- Use outFile2 for debugging and for printing the chain code in a more readable format as
       follows:
		#rows #cols min max // one text line
		startRow startCol Label // one text line
		code1 code2 code3 .... // 20 chain codes per text line with 1 space in between codes.
		:
		:
*******************************
III. Data structure:
******************************* 
- An image class 
 
 	- numRows (int)
	- numCols (int)
	- minVal (int)
	- maxVal (int)
	
	- zeroFramedAry (int **) a 2D array, need to dynamically allocate at run time
			of size numRows + 2 by numCols + 2.

	methods:
	- constructor(s)
		- need to dynamically allocate ZeroFrameAry 
		- assign values to numRows,..., etc.
 	- zeroFramed  
	- loadImage 
			// Read from the input file onto ZeroFrameAry  
			// the first pixel of input image is loaded 
			// at ZeroFrameAry[1][1]

- a chainCode class	
		 
	- a Point class
		 row (int)
		 col (int)
	- neighborCoord[8] (Point) // Give a point,p(i,j), this array
						// provide the x-y coordinate of p(i,j)'s eight neigbors
						// w.r.t the chain code directoions. 
						// i.e., p(i,j)'s neighbor of chain-code direction of 2,
						// the neighbor's x-y coordinate would be (i-1, j)  

	- currentP (Point) // current none zero border pixel
	- nextP (Point)    // next nonezero border pixel
	- lastQ // Range from 0 to 7, it is the direction of the last zero scanned from currentP
	- nextDirTable[8] 
				  // the index is the direction from currentP to the last zero
				  // nextDirTable[index] is the direction from nextP to the last zero.
				// You may hard code this table as given in class
	
	- nextDir   // the next scanning direction of currentP's neighbors to find nextP,  
			  // range from 0 to 7, need to mod 8.
 
	- Pchain // chain code direction from currentP to nextP
	
 
	methods: 
	- constructors
	- loadNeighborsCoord(...)
	- findNextP (...) // begin chain-code construction for the given connected component
	- prettyPrint
     
*******************************
III. ChainCode Algorithms 
*******************************
 step 1: inFile <-- open input file for read
	   output image header to outFile1
	   output image header to outFile2 // per text line

 step 2: scan the zeroFramed image from L to R &  T to B
	
 step 3: if image(iRow, jCol) > 0
			output iRow, jCol, image(iRow, jCol) to outFile1
			output iRow, jCol, image(iRow, jCol) to outFile2 // per text line

		startP <-- (iRow, jCol)
		currentP <-- (iRow, jCol)
		lastQ <-- 4

step 4: nextQ <-- mod(lastQ+1, 8)

step 5: Pchain <-- findNextP(currentP, nextQ, nextP)  
	 
step 6: output Pchain to outFile1 // no spaces.
	   output Pchain to outFile2 // with the readable format as given above

step 7: lastQ <-- nextDirTable[Pchian]	
	   currentP <-- nextP

step 8: repeat step 4 to step 7 until currentP == startP

step 9: close all files.

*******************************
III. findNextP(currentP, nextQ, nextP)
*******************************

step 1: loadNeighborCoord(currentP) 
	
step 2: chainDir <-- scan currentP's 8 neighbors within nighborCoord[] array from nextQ direction (mod 8)
	until a none zero neighbor with the same label as currentCC is found, chainDir is the index of 
	neighborCoord[] which with the same label as currentP

step 3: nextP <-- nighborCoord[chainDir]

step 4: returns chainDir 	
		


